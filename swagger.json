{
    "openapi": "3.0.1",
    "info": {
      "version": "2.0.0",
      "title": "Swagger Drink master",
      "description": "Showing off swagger-ui-express",
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "consumes": ["application/json", "multipart/form-data"],
    "produces": ["application/json"],
    "servers": [
      { "url": "http://localhost:3000/api" },
      { "url": "https://project05-backend.onrender.com/api" }
    ],
    "tags": [
        {
          "name": "Auth",
          "description": "Authorization endpoints"
        },
        {
          "name": "Own",
          "description": "Owner endpoints"
        },
        {
          "name": "Recipes",
          "description": "Recipes endpoints"
        },
        {
          "name": "Ingredients",
          "description": "Ingredients endpoints"
        },
        {
          "name": "Glass",
          "description": "Glass endpoints"
        },
        {
          "name": "Favorite",
          "description": "Favorite endpoints"
        },
        {
          "name": "Popular-recipe",
          "description": "Popular-recipe endpoints"
        },
        {
          "name": "Search",
          "description": "Search endpoints"
        }
      ],
      "paths": {
        "/auth/register": {
          "post": {
            "tags": ["Auth"],
            "summary": "User registration",
            "parameters": [],
            "requestBody": {
              "description": "Registration's object",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RegistrationRequest"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/RegistrationResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request (invalid request body)",
                "content": {}
              },
              "409": {
                "description": "Provided email already exists",
                "content": {}
              }
            }
          }
        },
        "/auth/login": {
          "post": {
            "tags": ["Auth"],
            "summary": "User login",
            "parameters": [],
            "requestBody": {
              "description": "Login's object",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginRequest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/LoginResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request (invalid request body)",
                "content": {}
              },
              "401": {
                "description": "Email or password is wrong",
                "content": {}
              }
            }
          }
        },
        "/auth/:id": {
          "get": {
            "tags": ["Auth"],
            "summary": "Search users by ID or email",
            "parameters": [
              {
                "in": "query",
                "name": "id",
                "schema": {
                  "type": "string"
                },
                "description": "User's ID"
              },
              {
                "in": "query",
                "name": "email",
                "schema": {
                  "type": "string"
                },
                "format": "email",
                "description": "User's email"
              }
            ],
            "security": [{ "Bearer": [] }],
            "responses": {
              "200": {
                "description": "Successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GetUserResponse"
                    }
                  }
                }
              },
              "401": {
                "description": "Not authorized",
                "content": {}
              },
              "404": {
                "description": "Not found",
                "content": {}
              }
            }
          }
        },


        "/auth/update": {
          "patch": {
            "tags": ["Auth"],
            "summary": "Update user's name or avatar",
            "parameters": [
              {
                "in": "query",
                "name": "_id",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "User's ID"
              }
            ],
            "security": [{ "Bearer": [] }],
            "requestBody": {
              "description": "User object with identifier or unique information",
              "required": true,
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "User's name"
                      },
                      "avatar": {
                        "type": "string",
                        "format": "binary",
                        "description": "User's avatar image"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UpdateUserResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request (invalid request body)",
                "content": {}
              },
              "401": {
                "description": "Not authorized",
                "content": {}
              }
            }
          }
        },
        "/auth/logout": {
          "post": {
            "tags": ["Auth"],
            "summary": "User logout",
            "parameters": [
              {
                "in": "query",
                "name": "_id",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "User's ID"
              }
            ],
            "security": [{ "Bearer": [] }],
            "responses": {
              "201": {
                "description": "Successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/LogoutUserResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request (invalid request body)",
                "content": {}
              },
              "401": {
                "description": "Not authorized",
                "content": {}
              }
            }
          }
        },
        "/auth/subscribe": {
          "patch": {
            "tags": ["Auth"],
            "summary": "User subscribe",
            "parameters": [

            ],
            "security": [{ "Bearer": [] }],
            "requestBody": {
              "description": "User object with email adress",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubscribeUserRequest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Newsletter Subscribe sent",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SubscribeUserResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Missing required field email",
                "content": {}
              },
              "404": {
                "description": "User not found",
                "content": {}
              }
            }
          }
        },
        "/search": {
          "get": {
            "tags": ["Search"],
            "summary": "Search for cocktail recipes by name, category or ingredient",
            "parameters": [
              {
                "in": "query",
                "name": "keyword",
                "schema": {
                  "type": "string"
                },
                "description": "Cocktail name, category or ingredient."
              },
              {
                "in": "query",
                "name": "pageNumber",
                "schema": {
                  "type": "string"
                },
                "description": "Page number"
              },
              {
                "in": "query",
                "name": "pageSize",
                "schema": {
                  "type": "string"
                },
                "description": "The number of elements on the page"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SearchResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request (invalid request body)",
                "content": {}
              },
              "401": {
                "description": "Recipes not found",
                "content": {}
              }
            }
          }
        }

    },
    "components": {
      "schemas": {
        "RegistrationRequest": {
          "type": "object",
          "required": ["name", "email", "password"],
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name"
            },
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email"
            },
            "password": {
              "type": "string",
              "description": "User's password"
            }
          },
          "example": {
            "name": "Aaron Barnes",
            "email": "aaron@gmail.com",
            "password": "Qwe123"
          }
        },
        "RegistrationResponse": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name",
              "format": "Aaron Barnes"
            },
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email"
            },
            "avatarURL": {
              "type": "string",
              "description": "User's avatar",
              "example": "//www.gravatar.com/avatar/395df683fb7c0f1aad22dbf40031517a?s=200&d=identicon"
            }
          },
          "example": {
            "name": "Aaron Barnes",
            "email": "aaron@gmail.com",
            "avatarURL": "//www.gravatar.com/avatar/395df683fb7c0f1aad22dbf40031517a?s=200&d=identicon"
          }
        },
        "LoginRequest": {
          "type": "object",
          "required": ["email", "password"],
          "properties": {
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email"
            },
            "password": {
              "type": "string",
              "description": "User's password",
              "example": "Qwe123"
            }
          },
          "example": {
            "email": "aaron@gmail.com",
            "password": "Qwe123"
          }
        },
  
        "LoginResponse": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "User's token",
              "format": "JWT"
            },
            "user": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User's email",
                  "format": "email"
                }
              }
            }
          },
          "example": [
            {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZWJlMjY0ZDJhZTdkYWJjYjViZTBkYiIsImlhdCI6MTY5MzQ2OTU0MiwiZXhwIjoxNjk1MjgzOTQyfQ.hcG4kTbunvFLj5_UoLe7tu9AK9wMX9BdkoSrA8oc97U",
              "user": {
                "email": "aaron@gmail.com"
              }
            }
          ]
        },
        "GetUserResponse": {
          "type": "object",
          "properties": {
            "user": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "User's _id"
                },
                "name": {
                  "type": "string",
                  "description": "User's name"
                },
                "password": {
                  "type": "string",
                  "description": "User's password",
                  "format": "password"
                },
                "email": {
                  "type": "string",
                  "description": "User's email",
                  "format": "email"
                },
                "avatarURL": {
                  "type": "string",
                  "description": "User's avatar"
                },
                "subscribe": {
                  "type": "boolean",
                  "description": "User's subscribe"
                },
                "token": {
                  "type": "string",
                  "description": "User's token",
                  "format": "JWT"
                }
              }
            }
          },
          "example": {
            "user": {
              "_id": "64ebe264d2ae7dabcb5be0db",
              "name": "Aaron Barnes",
              "password": "$2b$10$t566cThgNEGlsi.9d5HRi.ig/znXEKj4k4Nw2XdFJmRIvZ3gna.2y",
              "email": "aaron@gmail.com",
              "avatarURL": "//www.gravatar.com/avatar/395df683fb7c0f1aad22dbf40031517a?s=200&d=identicon",
              "subscribe": false,
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZWJlMjY0ZDJhZTdkYWJjYjViZTBkYiIsImlhdCI6MTY5MzQ2OTU0MiwiZXhwIjoxNjk1MjgzOTQyfQ.hcG4kTbunvFLj5_UoLe7tu9AK9wMX9BdkoSrA8oc97U"
            }
          }
        },
        "UpdateUserResponse": {
          "type": "object",
          "properties": {
            "user": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "User's _id"
                },
                "name": {
                  "type": "string",
                  "description": "User's name"
                },
                "password": {
                  "type": "string",
                  "description": "User's password",
                  "format": "password"
                },
                "email": {
                  "type": "string",
                  "description": "User's email",
                  "format": "email"
                },
                "avatarURL": {
                  "type": "string",
                  "description": "User's avatar"
                },
                "subscribe": {
                  "type": "boolean",
                  "description": "User's subscribe"
                },
                "token": {
                  "type": "string",
                  "description": "User's token",
                  "format": "JWT"
                }
              }
            }
          },
          "example": {
            "user": {
              "_id": "64ebe264d2ae7dabcb5be0db",
              "name": "Aaron Barnes",
              "password": "$2b$10$t566cThgNEGlsi.9d5HRi.ig/znXEKj4k4Nw2XdFJmRIvZ3gna.2y",
              "email": "aaron@gmail.com",
              "avatarURL": "//www.gravatar.com/avatar/395df683fb7c0f1aad22dbf40031517a?s=200&d=identicon",
              "subscribe": false,
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZWJlMjY0ZDJhZTdkYWJjYjViZTBkYiIsImlhdCI6MTY5MzQ2OTU0MiwiZXhwIjoxNjk1MjgzOTQyfQ.hcG4kTbunvFLj5_UoLe7tu9AK9wMX9BdkoSrA8oc97U"
            }
          }
        },
        "LogoutUserResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message"
            }
          },
          "example": {
            "message": "No Content"
          }
        },
        "SubscribeUserRequest": {
          "type": "object",
          "required": ["email"],
          "properties": {
            "_id": {
              "type": "string",
              "description": "User's email"
            }
          },
          "example": {
            "email": "aaron@gmail.com"
          }
        },
  
        "SubscribeUserResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message"
            }
          },
          "example": {
            "message": "Newsletter Subscribe sent"
          }
        },
        "SearchResponse": {
          "type": "object",
          "properties": {
            "cocktails": {
              "type": "array",
              "description": "Array of cocktails"
            }
          },
          "example": {
            "cocktails": [
                {
                    "_id": "639b6de9ff77d221f190c50f",
                    "drink": "Quentin",
                    "drinkAlternate": null,
                    "tags": null,
                    "video": null,
                    "category": "Ordinary Drink",
                    "IBA": null,
                    "alcoholic": "Alcoholic",
                    "glass": "Cocktail glass",
                    "instructions": "In a shaker half-filled with ice cubes, combine the rum, Kahlua, and cream. Shake well. Strain into a cocktail glass and garnish with the nutmeg.",
                    "instructionsES": "En una coctelera llena hasta la mitad con cubitos de hielo, combine el ron, Kahlua y la crema. Agite bien. Colar en una copa de cóctel y decorar con la nuez moscada.",
                    "instructionsDE": "In einem Shaker, der halb mit Eiswürfeln gefüllt ist, Rum, Kahlua und Sahne mischen. Gut schütteln. In ein Cocktailglas abseihen und mit der Muskatnuss garnieren.",
                    "instructionsFR": "Dans un shaker à moitié rempli de glaçons, mélanger le rhum, le Kahlua et la crème. Bien agiter. Versez dans un verre à cocktail et décorez avec la noix de muscade.",
                    "instructionsIT": "In uno shaker riempito a metà con cubetti di ghiaccio, unire il rum, il Kahlua e la panna. Filtrare in una coppetta da cocktail e guarnire con la noce moscata. Agitare bene.",
                    "instructionsRU": "В шейкере, наполовину наполненном кубиками льда, смешайте ром, Калуа и сливки. Хорошо встряхнуть. Процедите в коктейльный бокал и украсьте мускатным орехом.",
                    "instructionsPL": "W shakerze wypełnionym do połowy kostkami lodu wymieszać rum, Kahlua i śmietanę. Dobrze wstrząsnąć. Przelej do kieliszka koktajlowego i udekoruj gałką muszkatołową.",
                    "instructionsUK": "У шейкері, наповненому наполовину кубиками льоду, змішайте ром, Калуа та вершки. Добре струсити. Процідіть у келих для коктейлю та прикрасьте мускатним горіхом.",
                    "drinkThumb": "http://res.cloudinary.com/dec1shvoo/image/upload/v1689167161/cocktails-v1/drinks/Quentin.jpg",
                    "ingredients": [
                        {
                            "title": "Dark rum",
                            "measure": "1 1/2 oz ",
                            "ingredientThumb": "http://res.cloudinary.com/dec1shvoo/image/upload/v1689169605/cocktails-v1/ingredient/Dark%20rum.png",
                            "thumb-medium": "http://res.cloudinary.com/dec1shvoo/image/upload/v1689169605/cocktails-v1/ingredient/Dark%20rum-Medium.png",
                            "thumb-small": "http://res.cloudinary.com/dec1shvoo/image/upload/v1689169605/cocktails-v1/ingredient/Dark%20rum-Small.png"
                        },
                        {
                            "title": "Kahlua",
                            "measure": "1/2 oz ",
                            "ingredientThumb": "http://res.cloudinary.com/dec1shvoo/image/upload/v1689169605/cocktails-v1/ingredient/Kahlua.png",
                            "thumb-medium": "http://res.cloudinary.com/dec1shvoo/image/upload/v1689169605/cocktails-v1/ingredient/Kahlua-Medium.png",
                            "thumb-small": "http://res.cloudinary.com/dec1shvoo/image/upload/v1689169605/cocktails-v1/ingredient/Kahlua-Small.png"
                        },
                        {
                            "title": "Light cream",
                            "measure": "1 oz "
                        },
                        {
                            "title": "Nutmeg",
                            "measure": "1/8 tsp grated "
                        }
                    ],
                    "updatedAt": "2023-08-30T20:46:19.461Z",
                    "usersId": [
                        "64eae6b73b8a2cf97c431fd7",
                        "64eb0a1d3fa4384dcb1f8fdf"
                    ]
                }
            ],
            "totalPages": 1,
            "totalCount": 1,
            "currentPage": "1"
        }
        }
        },


        "securitySchemes": {
          "Bearer": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
          }
        }
      }
  }